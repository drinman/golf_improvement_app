"use client";

import { useState, useEffect } from "react";
import { useRouter } from "next/navigation";
import { useAuth } from "@/app/firebase/auth-context";
import { getUserMonthlyRecaps } from "@/app/firebase/db";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import Link from "next/link";
import { CalendarDaysIcon, ChartBarIcon, TrophyIcon } from "@heroicons/react/24/outline";
import type { MonthlyRecap, EffortScores } from "@/app/types/recap";

export default function MonthlyRecapPage() {
  const { currentUser } = useAuth();
  const router = useRouter();
  const [recaps, setRecaps] = useState<MonthlyRecap[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [autoGeneratedRecap, setAutoGeneratedRecap] = useState<MonthlyRecap | null>(null);

  // Get current month in YYYY-MM format
  const getCurrentMonth = () => {
    const now = new Date();
    return `${now.getFullYear()}-${String(now.getMonth() + 1).padStart(2, "0")}`;
  };

  // Get previous month in YYYY-MM format
  const getPreviousMonth = () => {
    const now = new Date();
    const lastMonth = new Date(now.getFullYear(), now.getMonth() - 1, 1);
    return `${lastMonth.getFullYear()}-${String(lastMonth.getMonth() + 1).padStart(2, "0")}`;
  };

  useEffect(() => {
    const fetchRecaps = async () => {
      if (!currentUser) {
        router.push("/auth/signin");
        return;
      }

      try {
        const recapsList = await getUserMonthlyRecaps(currentUser.uid);
        
        // Check for auto-generated recaps that haven't been reviewed
        const autoRecaps = recapsList.filter(recap => 
          recap.autoGenerated && 
          recap.effortScores && 
          !recap.userReviewed
        );
        
        if (autoRecaps.length > 0) {
          // Get the most recent auto-generated recap
          setAutoGeneratedRecap(autoRecaps[0] as MonthlyRecap);
        }
        
        setRecaps(recapsList as MonthlyRecap[]);
      } catch (error) {
        console.error("Error fetching recaps:", error);
      } finally {
        setIsLoading(false);
      }
    };

    fetchRecaps();
  }, [currentUser, router]);

  // Get month name from YYYY-MM format
  const getMonthName = (monthStr: string) => {
    const [year, month] = monthStr.split("-");
    const date = new Date(parseInt(year), parseInt(month) - 1, 1);
    return date.toLocaleString('default', { month: 'long', year: 'numeric' });
  };

  // Calculate average score across all categories
  const getAverageScore = (effortScores: EffortScores) => {
    if (!effortScores) return 0;
    
    const values = Object.values(effortScores) as number[];
    const sum = values.reduce((acc: number, val: number) => acc + val, 0);
    return (sum / values.length).toFixed(1);
  };

  // Get handicap change
  const getHandicapChange = (startHandicap: number, endHandicap: number) => {
    const change = startHandicap - endHandicap;
    return change.toFixed(1);
  };

  if (isLoading) {
    return (
      <div className="flex justify-center items-center h-[calc(100vh-6rem)]">
        <div className="text-center">
          <p className="text-gray-500">Loading your recaps...</p>
        </div>
      </div>
    );
  }

  const currentMonth = getCurrentMonth();
  const previousMonth = getPreviousMonth();
  const hasCurrentMonthRecap = recaps.some(recap => recap.month === currentMonth);

  return (
    <div className="container mx-auto py-8">
      <div className="flex flex-col md:flex-row justify-between items-start mb-6">
        <div>
          <h1 className="text-3xl font-bold text-gray-900">Monthly Recaps</h1>
          <p className="text-gray-600 mt-2">
            Track your golf improvement efforts and see how they correlate with your handicap progress.
          </p>
        </div>
        <div className="mt-4 md:mt-0">
          {!hasCurrentMonthRecap && (
            <Link href="/recap/create">
              <Button className="bg-blue-500 text-white hover:bg-blue-600">
                Create {getMonthName(currentMonth)} Recap
              </Button>
            </Link>
          )}
        </div>
      </div>

      {/* Auto-generated recap prompt */}
      {autoGeneratedRecap && (
        <Card className="mb-8 border-blue-200 bg-blue-50">
          <CardContent className="p-6">
            <div className="flex flex-col md:flex-row justify-between items-center">
              <div>
                <h2 className="text-lg font-semibold text-blue-800 mb-2">
                  Your {getMonthName(autoGeneratedRecap.month)} recap is ready!
                </h2>
                <p className="text-gray-700 mb-4">
                  We've automatically generated a monthly recap based on your practice data.
                  Review and confirm your effort scores to track your progress.
                </p>
              </div>
              <div className="flex gap-4 mt-4 md:mt-0">
                <Button
                  variant="outline"
                  className="border-blue-500 text-blue-700 hover:bg-blue-50"
                  onClick={() => router.push(`/recap/${autoGeneratedRecap.month}`)}
                >
                  View Recap
                </Button>
              </div>
            </div>
          </CardContent>
        </Card>
      )}

      {recaps.length > 0 ? (
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
          {recaps.map((recap) => (
            <Link
              key={recap.id}
              href={`/recap/${recap.month}`}
              className="block transition-transform hover:scale-105"
            >
              <Card className="h-full hover:shadow-md transition-shadow">
                <CardHeader className="pb-3">
                  <CardTitle className="flex justify-between items-center">
                    <span>{getMonthName(recap.month)}</span>
                    <div className="flex items-center">
                      {recap.autoGenerated && !recap.userReviewed && (
                        <span className="bg-yellow-100 text-yellow-800 text-xs mr-2 px-2 py-0.5 rounded">
                          Needs Review
                        </span>
                      )}
                      <CalendarDaysIcon className="h-5 w-5 text-blue-500" />
                    </div>
                  </CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="space-y-4">
                    <div className="flex justify-between items-center">
                      <div className="flex items-center gap-1">
                        <TrophyIcon className="h-5 w-5 text-blue-500" />
                        <span className="text-sm font-medium">Effort Score:</span>
                      </div>
                      <span className="text-xl font-bold">{getAverageScore(recap.effortScores)}/5</span>
                    </div>

                    <div className="flex justify-between items-center">
                      <div className="flex items-center gap-1">
                        <ChartBarIcon className="h-5 w-5 text-blue-500" />
                        <span className="text-sm font-medium">Handicap Change:</span>
                      </div>
                      <span className="text-xl font-bold text-teal-600">
                        {getHandicapChange(recap.handicapStartOfMonth, recap.handicapEndOfMonth)}
                      </span>
                    </div>

                    {recap.notes && (
                      <div className="pt-2 border-t border-gray-100">
                        <p className="text-sm text-gray-600 line-clamp-2">{recap.notes}</p>
                      </div>
                    )}
                  </div>
                </CardContent>
              </Card>
            </Link>
          ))}
        </div>
      ) : (
        <Card>
          <CardContent className="py-10 text-center">
            <p className="text-gray-500 mb-4">You haven't created any monthly recaps yet.</p>
            <Link href="/recap/create">
              <Button className="bg-blue-500 text-white hover:bg-blue-600">
                Create Your First Monthly Recap
              </Button>
            </Link>
          </CardContent>
        </Card>
      )}
    </div>
  );
} 