"use client";

import { useState, useEffect } from "react";
import { useRouter } from "next/navigation";
import { useAuth } from "@/app/firebase/auth-context";
import { getUserProfile, getUserGoals, getUserPracticeLogs, getUserPracticePlans, getUserMonthlyRecaps } from "@/app/firebase/db";
import { Card, CardContent, CardDescription, CardHeader, CardTitle, CardFooter } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer } from "recharts";
import { Timestamp } from "firebase/firestore";
import Link from "next/link";
import { 
  TrophyIcon, 
  CalendarDaysIcon, 
  ClockIcon, 
  ChartBarIcon, 
  FireIcon, 
  SparklesIcon,
  ArrowDownIcon,
  ArrowUpIcon,
  StarIcon,
  PlusIcon,
  ChevronDownIcon,
  ChevronUpIcon,
  PencilIcon,
  EllipsisHorizontalIcon
} from "@heroicons/react/24/outline";
import { Badge } from "@/components/ui/badge";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { doc, updateDoc } from "firebase/firestore";
import { db } from "@/app/firebase/config";
import React from "react";
import GenerateMockDataButton from "@/app/components/generate-mock-data-button";

export default function Dashboard() {
  const { currentUser } = useAuth();
  const router = useRouter();
  const [userProfile, setUserProfile] = useState<any>(null);
  const [goals, setGoals] = useState<any[]>([]);
  const [practiceLogs, setPracticeLogs] = useState<any[]>([]);
  const [practicePlans, setPracticePlans] = useState<any[]>([]);
  const [monthlyRecaps, setMonthlyRecaps] = useState<any[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  
  // State for UI controls
  const [expandedGoals, setExpandedGoals] = useState(false);
  const [sortOption, setSortOption] = useState<string>("progress");
  
  // Stats calculations
  const [stats, setStats] = useState({
    sessionsThisMonth: 0,
    totalTimeThisMonth: 0,
    currentStreak: 0,
    handicapProgress: 0,
    hasImproved: false,
    handicapChange: 0
  });

  const [selectedGoal, setSelectedGoal] = useState<any>(null);
  const [editGoalValues, setEditGoalValues] = useState({
    title: "",
    currentValue: 0,
    targetValue: 0,
    isReduction: false // Flag to indicate if the goal is to reduce the value
  });
  const [isEditGoalOpen, setIsEditGoalOpen] = useState(false);

  useEffect(() => {
    const fetchData = async () => {
      if (!currentUser) {
        router.push("/auth/signin");
        return;
      }

      try {
        const profile = await getUserProfile(currentUser.uid);
        const userGoals = await getUserGoals(currentUser.uid);
        const logs = await getUserPracticeLogs(currentUser.uid);
        const plans = await getUserPracticePlans(currentUser.uid);
        const recaps = await getUserMonthlyRecaps(currentUser.uid);

        setUserProfile(profile);
        setGoals(userGoals);
        setPracticeLogs(logs);
        setPracticePlans(plans);
        setMonthlyRecaps(recaps);
        
        // Calculate stats
        calculateStats(logs, profile, userGoals);
      } catch (error) {
        console.error("Error fetching data:", error);
      } finally {
        setIsLoading(false);
      }
    };

    fetchData();
  }, [currentUser, router]);

  // Calculate dashboard stats
  const calculateStats = (logs: any[], profile: any, userGoals: any[]) => {
    // Current date for calculations
    const now = new Date();
    const currentMonth = now.getMonth();
    const currentYear = now.getFullYear();
    
    // Filter logs for current month
    const thisMonthLogs = logs.filter(log => {
      const logDate = log.date.toDate();
      return logDate.getMonth() === currentMonth && logDate.getFullYear() === currentYear;
    });
    
    // Calculate sessions this month
    const sessionsThisMonth = thisMonthLogs.length;
    
    // Calculate total practice time this month
    const totalTimeThisMonth = thisMonthLogs.reduce((total, log) => total + log.duration, 0);
    
    // Calculate current streak
    const streak = calculatePracticeStreak(logs);
    
    // Calculate handicap progress
    let handicapProgress = 0;
    let hasImproved = false;
    let handicapChange = 0;
    
    const handicapGoal = userGoals.find(goal => goal.title.toLowerCase().includes('handicap'));
    
    if (handicapGoal && profile.handicap !== undefined) {
      const startValue = handicapGoal.startValue || profile.handicap;
      const targetValue = handicapGoal.targetValue;
      
      // Calculate progress percentage
      if (targetValue < startValue) { // Goal is to lower handicap
        const totalNeededReduction = startValue - targetValue;
        const actualReduction = startValue - profile.handicap;
        handicapProgress = Math.min(100, Math.max(0, (actualReduction / totalNeededReduction) * 100));
        hasImproved = profile.handicap < startValue;
        handicapChange = startValue - profile.handicap;
      } else { // Goal is to increase handicap (rare)
        const totalNeededIncrease = targetValue - startValue;
        const actualIncrease = profile.handicap - startValue;
        handicapProgress = Math.min(100, Math.max(0, (actualIncrease / totalNeededIncrease) * 100));
        hasImproved = profile.handicap > startValue;
        handicapChange = profile.handicap - startValue;
      }
    }
    
    setStats({
      sessionsThisMonth,
      totalTimeThisMonth,
      currentStreak: streak,
      handicapProgress,
      hasImproved,
      handicapChange
    });
  };
  
  // Calculate practice streak
  const calculatePracticeStreak = (logs: any[]) => {
    if (!logs.length) return 0;
    
    // Sort logs by date (newest first)
    const sortedLogs = [...logs].sort((a, b) => b.date.toDate().getTime() - a.date.toDate().getTime());
    
    const today = new Date();
    today.setHours(0, 0, 0, 0);
    
    const yesterday = new Date(today);
    yesterday.setDate(yesterday.getDate() - 1);
    
    // Check if practiced today or yesterday
    const mostRecentLogDate = sortedLogs[0].date.toDate();
    mostRecentLogDate.setHours(0, 0, 0, 0);
    
    const msBetween = today.getTime() - mostRecentLogDate.getTime();
    const daysBetween = msBetween / (1000 * 60 * 60 * 24);
    
    // If the most recent log is more than 1 day old, streak is broken
    if (daysBetween > 1) return 0;
    
    // Count consecutive days practiced
    let streak = 1;
    let currentDate = mostRecentLogDate;
    
    for (let i = 1; i < sortedLogs.length; i++) {
      const prevDate = new Date(currentDate);
      prevDate.setDate(prevDate.getDate() - 1);
      
      const logDate = sortedLogs[i].date.toDate();
      logDate.setHours(0, 0, 0, 0);
      
      // If this log is from the previous day, increase streak
      if (logDate.getTime() === prevDate.getTime()) {
        streak++;
        currentDate = logDate;
      } else if (logDate.getTime() < prevDate.getTime()) {
        // Gap in streak, stop counting
        break;
      }
    }
    
    return streak;
  };

  // Prepare practice data for chart
  const practiceChartData = practiceLogs.slice(0, 10).map(log => ({
    date: log.date.toDate().toLocaleDateString(),
    duration: log.duration,
    rating: log.rating || 0
  })).reverse();

  // Format timestamp for display
  const formatDate = (timestamp: Timestamp) => {
    if (!timestamp) return "";
    return timestamp.toDate().toLocaleDateString();
  };
  
  // Format minutes as hours and minutes
  const formatTime = (minutes: number) => {
    if (minutes < 60) return `${minutes} min`;
    const hours = Math.floor(minutes / 60);
    const remainingMinutes = minutes % 60;
    if (remainingMinutes === 0) return `${hours} hr${hours !== 1 ? 's' : ''}`;
    return `${hours} hr${hours !== 1 ? 's' : ''} ${remainingMinutes} min`;
  };

  // Function to sort goals based on selected option
  const sortedGoals = [...goals].sort((a, b) => {
    if (sortOption === "progress") {
      const progressA = ((a.currentValue || 0) / a.targetValue) * 100;
      const progressB = ((b.currentValue || 0) / b.targetValue) * 100;
      return progressB - progressA; // Highest progress first
    } else if (sortOption === "deadline") {
      // Sort by deadline (if available)
      if (!a.targetDate) return 1;
      if (!b.targetDate) return -1;
      return a.targetDate.toDate().getTime() - b.targetDate.toDate().getTime();
    } else {
      // Recently added (assuming newer goals are added first in the array)
      return 0; // Keep original order
    }
  });

  // Find the goal with the closest deadline
  const getNextMilestone = () => {
    if (!goals.length) return null;
    
    const goalsWithDeadlines = goals.filter(goal => goal.targetDate);
    if (!goalsWithDeadlines.length) return null;
    
    return goalsWithDeadlines.reduce((closest, current) => {
      if (!closest.targetDate) return current;
      return closest.targetDate.toDate() < current.targetDate.toDate() ? closest : current;
    });
  };
  
  const nextMilestone = getNextMilestone();

  // Calculate the correct progress percentage based on whether the goal is to increase or decrease
  const calculateGoalProgress = (goal: any) => {
    // If no current value is set yet
    if (goal.currentValue === undefined || goal.currentValue === null) return 0;
    
    // Determine if this is a reduction goal (like reducing handicap)
    const isReduction = goal.startValue > goal.targetValue;
    
    if (isReduction) {
      // For reduction goals (like reducing handicap)
      const totalReduction = goal.startValue - goal.targetValue;
      const currentReduction = goal.startValue - goal.currentValue;
      
      // Edge cases
      if (totalReduction <= 0) return 0;
      if (currentReduction < 0) return 0; // Current value is worse than start
      if (currentReduction > totalReduction) return 100; // Exceeded target
      
      return Math.round((currentReduction / totalReduction) * 100);
    } else {
      // For increase goals
      const totalIncrease = goal.targetValue - goal.startValue;
      const currentIncrease = goal.currentValue - goal.startValue;
      
      // Edge cases
      if (totalIncrease <= 0) return 0;
      if (currentIncrease < 0) return 0; // Current value is worse than start
      if (currentIncrease > totalIncrease) return 100; // Exceeded target
      
      return Math.round((currentIncrease / totalIncrease) * 100);
    }
  };

  // Function to handle saving the edited goal
  const handleSaveGoal = async () => {
    if (!selectedGoal || !currentUser) return;
    
    try {
      // Update the goal in Firebase
      const goalRef = doc(db, "users", currentUser.uid, "goals", selectedGoal.id);
      await updateDoc(goalRef, {
        title: editGoalValues.title,
        currentValue: parseFloat(editGoalValues.currentValue.toString()),
        // Only update fields that have changed
      });
      
      // Update local state
      setGoals(goals.map(goal => 
        goal.id === selectedGoal.id 
          ? { 
              ...goal, 
              title: editGoalValues.title, 
              currentValue: parseFloat(editGoalValues.currentValue.toString())
            } 
          : goal
      ));
      
      // Close modal
      setIsEditGoalOpen(false);
    } catch (error) {
      console.error("Error updating goal:", error);
      alert("Failed to update goal. Please try again.");
    }
  };

  if (isLoading) {
    return (
      <div className="flex justify-center items-center h-[calc(100vh-6rem)]">
        <div className="text-center">
          <p className="text-gray-500">Loading your dashboard...</p>
        </div>
      </div>
    );
  }

  // Get the most recent monthly recap
  const latestRecap = monthlyRecaps[0];
  
  // Find primary handicap goal
  const handicapGoal = goals.find(goal => goal.title.toLowerCase().includes('handicap'));
  
  // Get current month name
  const monthNames = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"];
  const currentMonth = monthNames[new Date().getMonth()];

  return (
    <>
      <div className="container px-4 py-6 mx-auto w-full max-w-7xl">
        {/* Welcome & Quick Stats */}
        <Card className="mb-8 bg-gray-50 border border-gray-200">
          <CardContent className="p-6">
            <div className="flex flex-col md:flex-row justify-between items-start gap-6">
              <div>
                <h1 className="text-3xl font-bold text-gray-800">Welcome, {userProfile?.name || "Golfer"}!</h1>
                <div className="mt-2 text-gray-700">
                  <p className="flex items-center mb-1">
                    <ChartBarIcon className="h-5 w-5 text-blue-500 mr-2" />
                    Handicap: <span className="font-medium mx-1">{userProfile?.handicap !== undefined ? userProfile.handicap : "Not set"}</span>
                    {handicapGoal && (
                      <span className="ml-1">→ Target: <span className="font-medium">{handicapGoal.targetValue}</span></span>
                    )}
                  </p>
                  
                  <p className="flex items-center mb-1">
                    <CalendarDaysIcon className="h-5 w-5 text-blue-500 mr-2" />
                    <span>{stats.sessionsThisMonth} session{stats.sessionsThisMonth !== 1 ? 's' : ''} logged this month</span>
                    {stats.totalTimeThisMonth > 0 && (
                      <span className="ml-1">({formatTime(stats.totalTimeThisMonth)})</span>
                    )}
                  </p>
                  
                  {stats.currentStreak > 0 && (
                    <p className="flex items-center mb-1">
                      <FireIcon className="h-5 w-5 text-blue-500 mr-2" />
                      <span>{stats.currentStreak} day streak! 🔥</span>
                    </p>
                  )}
                  
                  {stats.handicapChange > 0 && (
                    <p className="flex items-center">
                      <TrophyIcon className="h-5 w-5 text-blue-500 mr-2" />
                      {stats.hasImproved ? 
                        <span>Great progress! You've improved your handicap by <span className="font-medium">{stats.handicapChange.toFixed(1)}</span> strokes!</span> :
                        <span>You're only <span className="font-medium">{stats.handicapChange.toFixed(1)}</span> strokes away from your goal!</span>
                      }
                    </p>
                  )}

                  <div className="mt-4">
                    <GenerateMockDataButton />
                  </div>
                </div>
              </div>
              
              <div className="flex flex-col gap-2 mt-4 md:mt-0">
                <Link href="/practice/plan">
                  <Button className="w-full md:w-auto bg-blue-500 text-white hover:bg-blue-600">
                    <PlusIcon className="h-4 w-4 mr-2" />
                    Create Practice Plan
                  </Button>
                </Link>
                
                <Link href="/practice/log">
                  <Button variant="outline" className="w-full md:w-auto border-gray-300 text-gray-700 hover:bg-gray-100">
                    <PlusIcon className="h-4 w-4 mr-2" />
                    Log Practice Session
                  </Button>
                </Link>
              </div>
            </div>
          </CardContent>
        </Card>
        
        {/* Practice Streak Card - Only show if there's an active streak */}
        {stats.currentStreak > 0 && (
          <Card className="mb-8 bg-amber-50 border-amber-200">
            <CardContent className="p-4">
              <div className="flex items-center justify-center">
                <FireIcon className="h-6 w-6 text-amber-500 mr-2" />
                <span className="text-amber-800 font-medium">
                  Practice Streak: {stats.currentStreak} day{stats.currentStreak !== 1 ? 's' : ''}! 
                  {stats.currentStreak >= 3 ? ' Keep it up! 🔥' : ' Great start!'}
                </span>
              </div>
            </CardContent>
          </Card>
        )}

        {/* Main grid layout */}
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
          {/* Goals Section */}
          <div className="lg:col-span-1 flex flex-col h-full">
            <div className="flex justify-between items-center mb-4">
              <h2 className="text-xl font-semibold flex items-center text-gray-800">
                <TrophyIcon className="h-5 w-5 text-blue-500 mr-2" />
                Your Goals
              </h2>
              <div className="flex items-center">
                <DropdownMenu>
                  <DropdownMenuTrigger asChild>
                    <Button 
                      variant="outline" 
                      className="border border-gray-200 rounded px-3 py-1.5 text-gray-800 bg-white hover:bg-gray-50 text-sm flex items-center"
                    >
                      Sort by {sortOption === "progress" ? "Progress" : sortOption === "deadline" ? "Deadline" : "Recently Added"}
                      <ChevronDownIcon className="ml-2 h-4 w-4" />
                    </Button>
                  </DropdownMenuTrigger>
                  <DropdownMenuContent align="end">
                    <DropdownMenuItem onClick={() => setSortOption("progress")}>
                      Sort by Progress
                    </DropdownMenuItem>
                    <DropdownMenuItem onClick={() => setSortOption("deadline")}>
                      Sort by Deadline
                    </DropdownMenuItem>
                    <DropdownMenuItem onClick={() => setSortOption("recent")}>
                      Recently Added
                    </DropdownMenuItem>
                  </DropdownMenuContent>
                </DropdownMenu>
              </div>
            </div>

            {goals.length > 0 ? (
              <div className="flex flex-col h-full">
                {/* Goals Summary Card */}
                <Card className="mb-4 bg-gray-50 border border-gray-200">
                  <CardContent className="p-4">
                    <div className="flex flex-col space-y-2">
                      <div className="flex justify-between items-center">
                        <div className="flex items-center">
                          <span className="font-medium text-gray-800">🎯 {goals.length} Active Goals</span>
                          <span className="mx-2 text-gray-400">|</span>
                          <span className="text-sm text-gray-700">
                            Avg Progress: {goals.length > 0 
                              ? Math.round(goals.reduce((sum, goal) => sum + (((goal.currentValue || 0) / goal.targetValue) * 100), 0) / goals.length) 
                              : 0}%
                          </span>
                        </div>
                        
                        <Button 
                          variant="outline" 
                          size="sm" 
                          className="border-gray-300 text-gray-700 hover:bg-gray-100 flex items-center"
                          onClick={() => setExpandedGoals(!expandedGoals)}
                        >
                          {expandedGoals ? "Hide Goals" : "View All Goals"}
                          {expandedGoals ? (
                            <ChevronUpIcon className="ml-1 h-3.5 w-3.5" />
                          ) : (
                            <ChevronDownIcon className="ml-1 h-3.5 w-3.5" />
                          )}
                        </Button>
                      </div>
                      
                      {!expandedGoals && nextMilestone && (
                        <div className="text-sm text-gray-700">
                          <span className="font-medium">Next Milestone:</span> {nextMilestone.title} 
                          {nextMilestone.targetDate && (
                            <span className="ml-1 text-gray-600">by {formatDate(nextMilestone.targetDate)}</span>
                          )}
                        </div>
                      )}
                    </div>
                  </CardContent>
                </Card>

                {/* Goals List - with animation */}
                <div 
                  className={`space-y-4 mb-6 flex-grow transition-all duration-300 ease-in-out overflow-hidden ${
                    expandedGoals ? 'max-h-[2000px] opacity-100' : 'max-h-0 opacity-0'
                  }`}
                >
                  {sortedGoals.map((goal) => {
                    // Calculate the proper progress
                    const progress = calculateGoalProgress(goal);
                    
                    return (
                      <Card 
                        key={goal.id} 
                        className="bg-gray-50 border border-gray-200 shadow-sm hover:shadow cursor-pointer group relative"
                      >
                        <Link 
                          href="#" 
                          className="absolute inset-0 z-10"
                          onClick={(e) => {
                            e.preventDefault();
                            setSelectedGoal(goal);
                            setEditGoalValues({
                              title: goal.title,
                              currentValue: goal.currentValue || 0,
                              targetValue: goal.targetValue,
                              isReduction: goal.startValue > goal.targetValue
                            });
                            setIsEditGoalOpen(true);
                          }}
                        >
                          <span className="sr-only">Edit goal</span>
                        </Link>
                        <CardContent className="p-4">
                          <div className="flex justify-between items-start mb-3">
                            <h3 className="font-medium text-gray-800">{goal.title}</h3>
                            <div className="flex gap-2 items-center z-20 relative">
                              {goal.targetDate && (
                                <span className="text-xs bg-gray-100 text-gray-700 px-2 py-1 rounded-full">
                                  Due: {formatDate(goal.targetDate)}
                                </span>
                              )}
                              <Button 
                                variant="ghost" 
                                size="icon" 
                                className="h-7 w-7 rounded-full bg-white border border-gray-200 opacity-0 group-hover:opacity-100 transition-opacity"
                                onClick={(e) => {
                                  e.stopPropagation();
                                  e.preventDefault();
                                  setSelectedGoal(goal);
                                  setEditGoalValues({
                                    title: goal.title,
                                    currentValue: goal.currentValue || 0,
                                    targetValue: goal.targetValue,
                                    isReduction: goal.startValue > goal.targetValue
                                  });
                                  setIsEditGoalOpen(true);
                                }}
                              >
                                <PencilIcon className="h-3.5 w-3.5 text-gray-600" />
                              </Button>
                            </div>
                          </div>
                          <div className="space-y-3">
                            <div className="flex justify-between text-xs text-gray-700">
                              <span>Current: {goal.currentValue || "Not started"}</span>
                              <span>Target: {goal.targetValue}</span>
                            </div>
                            <div className="flex items-center gap-2">
                              <div className="w-full bg-gray-200 rounded-full h-2.5">
                                <div 
                                  className="bg-teal-400 h-2.5 rounded-full" 
                                  style={{ 
                                    width: `${progress}%`
                                  }}
                                ></div>
                              </div>
                              <span className="text-xs font-medium text-gray-700 min-w-[40px] text-right">
                                {progress}%
                              </span>
                            </div>
                          </div>
                        </CardContent>
                      </Card>
                    );
                  })}
                </div>

                <div className={`mt-auto text-center transition-all duration-300 ease-in-out ${
                  expandedGoals ? 'opacity-100' : 'opacity-0 h-0 overflow-hidden'
                }`}>
                  <Link href="/dashboard/goals/new">
                    <Button variant="outline" size="sm" className="border-gray-300 text-gray-700 hover:bg-gray-100 w-full sm:w-auto">
                      Add New Goal
                    </Button>
                  </Link>
                </div>
              </div>
            ) : (
              <Card className="bg-gray-50 border border-gray-200 h-full flex flex-col justify-center">
                <CardContent className="py-8 text-center">
                  <p className="text-gray-700 text-center mb-4">
                    You haven't set any goals yet.
                  </p>
                  <Link href="/dashboard/goals/new" className="inline-block">
                    <Button className="bg-blue-500 text-white hover:bg-blue-600">
                      Create your first goal
                    </Button>
                  </Link>
                </CardContent>
              </Card>
            )}
          </div>
          
          {/* Practice Plans Section */}
          <div className="lg:col-span-1 flex flex-col h-full">
            <h2 className="text-xl font-semibold mb-4 flex items-center text-gray-800">
              <CalendarDaysIcon className="h-5 w-5 text-blue-500 mr-2" />
              Practice Plans
            </h2>
            
            {practicePlans.length > 0 ? (
              <div className="flex flex-col h-full">
                {/* Tabs for plan status */}
                <div className="mb-4 border-b border-gray-200">
                  <nav className="flex -mb-px gap-4">
                    <button className="text-blue-500 border-b-2 border-blue-500 pb-2 font-medium">
                      Active
                    </button>
                    <button className="text-gray-500 hover:text-gray-700 pb-2">
                      Completed
                    </button>
                    <button className="text-gray-500 hover:text-gray-700 pb-2">
                      Archived
                    </button>
                  </nav>
                </div>
                
                <div className="space-y-4 flex-grow mb-6">
                  {practicePlans.slice(0, 3).map((plan) => {
                    const startDate = plan.startDate.toDate();
                    const endDate = plan.endDate.toDate();
                    
                    // Calculate session completion (mock data for demonstration)
                    const totalSessions = plan.sessions?.length || 4;
                    const completedSessions = Math.floor(Math.random() * (totalSessions + 1)); // Just for demo
                    const completionPercentage = (completedSessions / totalSessions) * 100;
                    
                    const formatShortDate = (date: Date) => {
                      return date.toLocaleDateString('en-US', { month: 'short', day: 'numeric' });
                    };
                    
                    return (
                      <Card key={plan.id} className="shadow-sm bg-white border border-gray-200 relative">
                        <CardContent className="p-4">
                          {/* Header with title and badges */}
                          <div className="flex justify-between items-start mb-1.5">
                            <h3 className="font-medium text-gray-800">{plan.title}</h3>
                            <div className="flex items-center gap-1.5">
                              {plan.aiGenerated && (
                                <Badge variant="outline" className="bg-blue-50 text-blue-800 border-blue-200 flex items-center h-5">
                                  <SparklesIcon className="h-3 w-3 mr-1" />
                                  AI
                                </Badge>
                              )}
                              <Badge className={`h-5 ${completedSessions === totalSessions 
                                ? "bg-teal-100 text-teal-800" 
                                : "bg-blue-100 text-blue-800"}`}>
                                {completedSessions === totalSessions 
                                  ? "Completed" 
                                  : `${completedSessions}/${totalSessions}`}
                              </Badge>
                            </div>
                          </div>
                          
                          {/* Date range */}
                          <p className="text-xs text-gray-500 mb-2">
                            {formatShortDate(startDate)} - {formatShortDate(endDate)}
                          </p>
                          
                          {/* Progress bar */}
                          <div className="w-full bg-gray-200 rounded-full h-1.5 mb-3">
                            <div 
                              className="bg-teal-400 h-1.5 rounded-full" 
                              style={{ width: `${completionPercentage}%` }}
                            />
                          </div>
                          
                          {/* Action buttons with even spacing */}
                          <div className="flex gap-3">
                            <Link href={`/practice/plan?id=${plan.id}`} className="flex-1">
                              <Button variant="outline" size="sm" className="w-full border-gray-300 text-gray-700 hover:bg-gray-100">View Plan</Button>
                            </Link>
                            <Link href={`/practice/log?planId=${plan.id}`} className="flex-1">
                              <Button size="sm" className="w-full bg-blue-500 text-white hover:bg-blue-600">Log Session</Button>
                            </Link>
                          </div>
                        </CardContent>
                      </Card>
                    );
                  })}
                </div>
                  
                <div className="mt-auto text-center space-x-2">
                  <Link href="/practice/plan">
                    <Button variant="outline" size="sm" className="border-gray-300 text-gray-700 hover:bg-gray-100">
                      View All Plans
                    </Button>
                  </Link>
                  <Link href="/practice/plan">
                    <Button size="sm" className="bg-blue-500 text-white hover:bg-blue-600">
                      <PlusIcon className="h-4 w-4 mr-1" />
                      New Plan
                    </Button>
                  </Link>
                </div>
              </div>
            ) : (
              <Card className="bg-gray-50 border border-gray-200 h-full flex flex-col justify-center">
                <CardContent className="py-8 text-center">
                  <p className="text-gray-700 mb-4">
                    No practice plans created yet.
                  </p>
                  <Link href="/practice/plan">
                    <Button className="bg-blue-500 text-white hover:bg-blue-600">
                      Create Your First Plan
                    </Button>
                  </Link>
                </CardContent>
              </Card>
            )}
          </div>
          
          {/* Recent Practice Logs */}
          <div className="lg:col-span-1 flex flex-col h-full">
            <h2 className="text-xl font-semibold mb-4 flex items-center text-gray-800">
              <ClockIcon className="h-5 w-5 text-blue-500 mr-2" />
              Recent Activity
            </h2>
            
            {practiceLogs.length > 0 ? (
              <div className="flex flex-col h-full">
                <div className="space-y-4 flex-grow mb-6">
                  {practiceLogs.slice(0, 5).map((log, index) => {
                    const logDate = log.date.toDate();
                    const isToday = new Date().toDateString() === logDate.toDateString();
                    const isYesterday = new Date(Date.now() - 86400000).toDateString() === logDate.toDateString();
                    const dateLabel = isToday ? 'Today' : isYesterday ? 'Yesterday' : formatDate(log.date);
                    
                    // Achievement badges
                    let achievementBadge = null;
                    if (index === 0 && stats.currentStreak >= 3) {
                      achievementBadge = (
                        <Badge className="bg-amber-100 text-amber-800 border-amber-200">
                          <FireIcon className="h-3 w-3 mr-1" /> {stats.currentStreak}-Day Streak
                        </Badge>
                      );
                    } else if (index === 0 && log.duration >= 90) {
                      achievementBadge = (
                        <Badge className="bg-purple-100 text-purple-800 border-purple-200">
                          <TrophyIcon className="h-3 w-3 mr-1" /> Epic Practice
                        </Badge>
                      );
                    }
                    
                    return (
                      <Card key={log.id} className="overflow-hidden hover:shadow-sm transition-shadow bg-gray-50 border border-gray-200 group cursor-pointer">
                        <Link href={`/practice/log`} className="absolute inset-0 z-10">
                          <span className="sr-only">View practice log details</span>
                        </Link>
                        <CardContent className="p-4">
                          <div className="flex flex-col md:flex-row justify-between">
                            <div>
                              <div className="flex items-center gap-2">
                                <h3 className="font-medium text-lg text-gray-800">{log.sessionTitle}</h3>
                                {achievementBadge}
                              </div>
                              <p className="text-sm text-gray-700 flex items-center gap-1">
                                <span>{dateLabel}</span>
                                <span className="mx-1">•</span>
                                <span>{log.duration} minutes</span>
                              </p>
                              {log.notes && <p className="text-sm mt-1 text-gray-700">{log.notes}</p>}
                            </div>
                            
                            <div className="flex items-center gap-2 mt-2 md:mt-0 z-20 relative">
                              {log.rating && (
                                <div className="flex items-center">
                                  <span className="text-sm font-medium mr-1 text-gray-700">Rating:</span>
                                  <div className="flex">
                                    {[...Array(5)].map((_, i) => (
                                      <span 
                                        key={i} 
                                        className={`h-4 w-4 text-sm ${i < log.rating ? 'text-yellow-400' : 'text-gray-300'}`}
                                      >
                                        ★
                                      </span>
                                    ))}
                                  </div>
                                </div>
                              )}
                              <Button 
                                variant="ghost" 
                                size="icon" 
                                className="h-7 w-7 rounded-full bg-white border border-gray-200 opacity-0 group-hover:opacity-100 transition-opacity"
                                onClick={(e) => {
                                  e.stopPropagation();
                                  e.preventDefault();
                                  // This would be replaced with actual edit functionality
                                  alert(`Editing log: ${log.sessionTitle}`);
                                }}
                              >
                                <PencilIcon className="h-3.5 w-3.5 text-gray-600" />
                              </Button>
                            </div>
                          </div>
                          
                          {log.drills && log.drills.length > 0 && (
                            <div className="mt-3 pt-3 border-t border-gray-100">
                              <div className="flex flex-wrap gap-2">
                                {log.drills.map((drill: any, drillIndex: number) => (
                                  <Badge key={drillIndex} variant="outline" className="bg-gray-50 text-gray-800 border-gray-300">
                                    {drill.name}
                                  </Badge>
                                ))}
                              </div>
                            </div>
                          )}
                        </CardContent>
                      </Card>
                    );
                  })}
                </div>
                
                <div className="mt-auto text-center">
                  <Link href="/practice/log">
                    <Button variant="outline" className="border-gray-300 text-gray-700 hover:bg-gray-100">View All Practice Logs</Button>
                  </Link>
                </div>
              </div>
            ) : (
              <Card className="bg-gray-50 border border-gray-200 h-full flex flex-col justify-center">
                <CardContent className="py-8 text-center">
                  <p className="text-gray-700 text-center mb-4">
                    No activity recorded yet.
                  </p>
                  <Link href="/practice/log" className="inline-block">
                    <Button className="bg-blue-500 text-white hover:bg-blue-600">
                      Log your first practice session
                    </Button>
                  </Link>
                </CardContent>
              </Card>
            )}
          </div>
        </div>
        
        {/* Monthly Recap */}
        <div className="mt-8">
          <h2 className="text-xl font-semibold mb-4 flex items-center text-gray-800">
            <ChartBarIcon className="h-5 w-5 text-blue-500 mr-2" />
            Monthly Recap
          </h2>
          
          {latestRecap ? (
            <Card className="overflow-hidden bg-gray-50 border border-gray-200 shadow-sm">
              <CardContent className="p-0">
                <div className="grid grid-cols-1 md:grid-cols-3">
                  <div className="bg-teal-50 p-6 flex flex-col justify-center items-center">
                    <h3 className="text-lg font-semibold text-teal-800 mb-2">
                      {monthNames[new Date(latestRecap.month).getMonth()]} Effort Score
                    </h3>
                    <div className="text-4xl font-bold text-teal-600 mb-3 flex items-center">
                      {parseFloat(getAverageScore(latestRecap.effortScores)).toFixed(1)}
                      <span className="text-base ml-1">/5</span>
                    </div>
                    <div className="flex">
                      {[1, 2, 3, 4, 5].map((value) => (
                        <StarIcon
                          key={value}
                          className={`h-5 w-5 ${
                            value <= parseFloat(getAverageScore(latestRecap.effortScores))
                              ? "text-yellow-400 fill-yellow-400"
                              : "text-gray-300"
                          }`}
                        />
                      ))}
                    </div>
                  </div>
                  
                  <div className="p-6 flex flex-col justify-center">
                    <div className="mb-4">
                      <div className="text-sm text-gray-700 mb-2">Handicap Change</div>
                      <div className="flex items-center">
                        <span className="text-lg font-semibold mr-2 text-gray-800">
                          {latestRecap.handicapStartOfMonth.toFixed(1)} →{" "}
                          {latestRecap.handicapEndOfMonth.toFixed(1)}
                        </span>
                        {latestRecap.handicapStartOfMonth > latestRecap.handicapEndOfMonth ? (
                          <Badge className="bg-teal-100 text-teal-800 flex items-center">
                            <ArrowDownIcon className="h-3 w-3 mr-1" />
                            {(latestRecap.handicapStartOfMonth - latestRecap.handicapEndOfMonth).toFixed(1)}
                          </Badge>
                        ) : latestRecap.handicapStartOfMonth < latestRecap.handicapEndOfMonth ? (
                          <Badge className="bg-red-100 text-red-800 flex items-center">
                            <ArrowUpIcon className="h-3 w-3 mr-1" />
                            {(latestRecap.handicapEndOfMonth - latestRecap.handicapStartOfMonth).toFixed(1)}
                          </Badge>
                        ) : (
                          <Badge className="bg-gray-100 text-gray-800">
                            No change
                          </Badge>
                        )}
                      </div>
                    </div>
                    
                    <div>
                      <div className="text-sm text-gray-700 mb-2">Practice Summary</div>
                      <p className="text-sm text-gray-800">
                        {stats.sessionsThisMonth} sessions logged ({formatTime(stats.totalTimeThisMonth)})
                      </p>
                      
                      {latestRecap.notes && (
                        <p className="text-sm text-gray-700 mt-3 italic line-clamp-2">
                          "{latestRecap.notes}"
                        </p>
                      )}
                    </div>
                  </div>
                  
                  <div className="bg-gray-50 p-6 flex flex-col justify-center">
                    <h3 className="text-lg font-semibold text-gray-800 mb-4">
                      Top Focus Areas
                    </h3>
                    <div className="space-y-3 w-full">
                      <div className="flex justify-between items-center">
                        <span className="text-sm text-gray-700">Putting</span>
                        <div className="flex">
                          {[1, 2, 3, 4, 5].map((value) => (
                            <div
                              key={value}
                              className={`h-2.5 w-2.5 rounded-full mx-0.5 ${
                                value <= (latestRecap.effortScores.putting || 0) ? "bg-teal-400" : "bg-gray-200"
                              }`}
                            />
                          ))}
                        </div>
                      </div>
                      <div className="flex justify-between items-center">
                        <span className="text-sm text-gray-700">Driving</span>
                        <div className="flex">
                          {[1, 2, 3, 4, 5].map((value) => (
                            <div
                              key={value}
                              className={`h-2.5 w-2.5 rounded-full mx-0.5 ${
                                value <= (latestRecap.effortScores.driving || 0) ? "bg-teal-400" : "bg-gray-200"
                              }`}
                            />
                          ))}
                        </div>
                      </div>
                      <div className="flex justify-between items-center">
                        <span className="text-sm text-gray-700">Short Game</span>
                        <div className="flex">
                          {[1, 2, 3, 4, 5].map((value) => (
                            <div
                              key={value}
                              className={`h-2.5 w-2.5 rounded-full mx-0.5 ${
                                value <= (latestRecap.effortScores.shortGame || 0) ? "bg-teal-400" : "bg-gray-200"
                              }`}
                            />
                          ))}
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              </CardContent>
              
              <CardFooter className="bg-gray-50 border-t border-gray-100 p-4 flex justify-center">
                <Link href={`/recap/${latestRecap.month}`}>
                  <Button variant="outline" className="border-gray-300 text-gray-700 hover:bg-gray-100">View Full Recap</Button>
                </Link>
              </CardFooter>
            </Card>
          ) : (
            <Card className="bg-gray-50 border border-gray-200 shadow-sm">
              <CardContent className="py-8">
                <div className="text-center">
                  <p className="text-gray-700 mb-4">
                    Your {currentMonth} recap will be generated at the end of the month.
                  </p>
                  <p className="text-sm text-gray-600">
                    Log your practice sessions regularly to get the most accurate insights!
                  </p>
                </div>
              </CardContent>
            </Card>
          )}
        </div>
      </div>
      
      {/* Goal Edit Modal */}
      <Dialog open={isEditGoalOpen} onOpenChange={setIsEditGoalOpen}>
        <DialogContent className="sm:max-w-[425px]">
          <DialogHeader>
            <DialogTitle>Edit Goal</DialogTitle>
            <DialogDescription>
              Make changes to your goal. Click save when you're done.
            </DialogDescription>
          </DialogHeader>
          <div className="grid gap-4 py-4">
            <div className="grid grid-cols-4 items-center gap-4">
              <Label htmlFor="title" className="text-right">
                Title
              </Label>
              <Input
                id="title"
                value={editGoalValues.title}
                onChange={(e) => setEditGoalValues({...editGoalValues, title: e.target.value})}
                className="col-span-3"
              />
            </div>
            <div className="grid grid-cols-4 items-center gap-4">
              <Label htmlFor="current-value" className="text-right">
                Current Value
              </Label>
              <Input
                id="current-value"
                type="number"
                step="0.1"
                value={editGoalValues.currentValue}
                onChange={(e) => setEditGoalValues({...editGoalValues, currentValue: parseFloat(e.target.value)})}
                className="col-span-3"
              />
            </div>
            <div className="grid grid-cols-4 items-center gap-4">
              <Label htmlFor="target-value" className="text-right">
                Target
              </Label>
              <Input
                id="target-value"
                type="number"
                step="0.1"
                value={editGoalValues.targetValue}
                disabled
                className="col-span-3 bg-gray-50"
              />
            </div>
            {selectedGoal && (
              <div className="grid grid-cols-4 items-center gap-4">
                <Label className="text-right">
                  Progress
                </Label>
                <div className="col-span-3 flex items-center gap-2">
                  <div className="w-full bg-gray-200 rounded-full h-2.5">
                    <div 
                      className="bg-teal-400 h-2.5 rounded-full" 
                      style={{ 
                        width: `${editGoalValues.isReduction 
                          ? Math.round(((selectedGoal.startValue - editGoalValues.currentValue) / (selectedGoal.startValue - selectedGoal.targetValue)) * 100)
                            : Math.round(((editGoalValues.currentValue - selectedGoal.startValue) / (selectedGoal.targetValue - selectedGoal.startValue)) * 100)
                        }%`
                      }}
                    ></div>
                  </div>
                  <span className="text-xs font-medium text-gray-700">
                    {editGoalValues.isReduction 
                      ? Math.round(((selectedGoal.startValue - editGoalValues.currentValue) / (selectedGoal.startValue - selectedGoal.targetValue)) * 100)
                      : Math.round(((editGoalValues.currentValue - selectedGoal.startValue) / (selectedGoal.targetValue - selectedGoal.startValue)) * 100)
                    }%
                  </span>
                </div>
              </div>
            )}
          </div>
          <DialogFooter>
            <Button variant="outline" onClick={() => setIsEditGoalOpen(false)}>Cancel</Button>
            <Button onClick={handleSaveGoal}>Save changes</Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>
    </>
  );
}

// Calculate average score across all categories
function getAverageScore(effortScores: any) {
  if (!effortScores) return "0";
  
  const values = Object.values(effortScores) as number[];
  const sum = values.reduce((acc: number, val: number) => acc + val, 0);
  return (sum / values.length).toFixed(1);
} 
