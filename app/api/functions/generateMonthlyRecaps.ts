import { db } from "@/app/firebase/admin";
import { Timestamp, FieldValue } from "firebase-admin/firestore";
import type { MonthlyRecap, EffortScores } from "@/app/types/recap";

interface PracticeDrill {
  title?: string;
  category?: string;
  // Add other properties as needed
}

interface PracticeLog {
  drills?: PracticeDrill[];
  // Add other properties as needed
}

export const generateMonthlyRecaps = async () => {
  try {
    const lastMonth = new Date();
    lastMonth.setMonth(lastMonth.getMonth() - 1);
    lastMonth.setDate(1); // First day of last month
    lastMonth.setHours(0, 0, 0, 0);
    
    const firstDayOfLastMonth = new Date(lastMonth);
    const lastDayOfLastMonth = new Date(lastMonth.getFullYear(), lastMonth.getMonth() + 1, 0, 23, 59, 59, 999);
    
    // Format as YYYY-MM
    const monthString = `${lastMonth.getFullYear()}-${String(lastMonth.getMonth() + 1).padStart(2, "0")}`;
    
    // Get all users
    const usersSnapshot = await db.collection("users").get();
    
    let recapsGenerated = 0;
    
    for (const userDoc of usersSnapshot.docs) {
      const userId = userDoc.id;
      
      // Check if user already has a recap for this month
      const existingRecapsQuery = await db
        .collection("users")
        .doc(userId)
        .collection("monthlyRecaps")
        .where("month", "==", monthString)
        .get();
        
      if (!existingRecapsQuery.empty) {
        // Skip if already has a recap
        continue;
      }
      
      // Get user's practice logs for the month
      const logsQuery = await db
        .collection("users")
        .doc(userId)
        .collection("practiceLogs")
        .where("date", ">=", Timestamp.fromDate(firstDayOfLastMonth))
        .where("date", "<=", Timestamp.fromDate(lastDayOfLastMonth))
        .get();
        
      // Only generate recaps for users with at least 4 practice logs
      if (logsQuery.size < 4) {
        continue;
      }
      
      // Get current handicap
      const profileDoc = await db.collection("users").doc(userId).get();
      const profile = profileDoc.data();
      
      if (!profile) continue;
      
      const currentHandicap = profile.handicap || 18; // Default to 18 if not set
      
      // Get handicap at start of month (from a previous recap or profile history)
      let startHandicap = currentHandicap;
      
      const handicapHistoryQuery = await db
        .collection("users")
        .doc(userId)
        .collection("handicapHistory")
        .where("date", "<=", Timestamp.fromDate(firstDayOfLastMonth))
        .orderBy("date", "desc")
        .limit(1)
        .get();
        
      if (!handicapHistoryQuery.empty) {
        startHandicap = handicapHistoryQuery.docs[0].data().handicap;
      }
      
      // Generate effort scores based on practice logs
      const effortScores = calculateEffortScores(logsQuery.docs.map(doc => doc.data() as PracticeLog));
      
      // Create the recap
      const recapData: Omit<MonthlyRecap, "id"> = {
        userId,
        month: monthString,
        handicapStartOfMonth: startHandicap,
        handicapEndOfMonth: currentHandicap,
        effortScores,
        createdAt: new Date(),
        autoGenerated: true,
        userReviewed: false,
        autoSuggestedScores: effortScores
      };
      
      await db
        .collection("users")
        .doc(userId)
        .collection("monthlyRecaps")
        .add(recapData);
        
      // Create a notification for the user
      await db
        .collection("users")
        .doc(userId)
        .collection("notifications")
        .add({
          title: "Monthly Recap Ready",
          message: `Your automated recap for ${getMonthName(monthString)} is ready! Check it out and provide your feedback.`,
          read: false,
          type: "recap",
          link: `/recap/${monthString}`,
          createdAt: FieldValue.serverTimestamp()
        });
        
      recapsGenerated++;
    }
    
    return { success: true, recapsGenerated };
  } catch (error) {
    console.error("Error generating monthly recaps:", error);
    return { success: false, error: (error as Error).message };
  }
};

// Helper function to calculate effort scores based on practice logs
const calculateEffortScores = (logs: PracticeLog[]): EffortScores => {
  // Initialize scores
  const scores: EffortScores = {
    practiceSessions: 0,
    mentalGame: 0,
    strengthTraining: 0,
    mobilityExercises: 0,
    fullSwingWork: 0,
    shortGameWork: 0,
    puttingWork: 0
  };
  
  if (logs.length === 0) return scores;
  
  // Count types of practice
  let sessionCount = logs.length;
  let mentalGameCount = 0;
  let strengthCount = 0;
  let mobilityCount = 0;
  let fullSwingCount = 0;
  let shortGameCount = 0;
  let puttingCount = 0;
  
  for (const log of logs) {
    // Check drill categories
    for (const drill of log.drills || []) {
      const category = drill.category?.toLowerCase() || "";
      
      if (category.includes("mental") || drill.title?.toLowerCase().includes("mental")) {
        mentalGameCount++;
      }
      
      if (category.includes("strength") || drill.title?.toLowerCase().includes("strength")) {
        strengthCount++;
      }
      
      if (category.includes("mobility") || drill.title?.toLowerCase().includes("mobility")) {
        mobilityCount++;
      }
      
      if (category.includes("full swing") || category.includes("driver") || 
          drill.title?.toLowerCase().includes("full swing") || 
          drill.title?.toLowerCase().includes("driver")) {
        fullSwingCount++;
      }
      
      if (category.includes("short game") || category.includes("chip") || category.includes("pitch") || 
          drill.title?.toLowerCase().includes("short game") || 
          drill.title?.toLowerCase().includes("chip") || 
          drill.title?.toLowerCase().includes("pitch")) {
        shortGameCount++;
      }
      
      if (category.includes("putting") || drill.title?.toLowerCase().includes("putt")) {
        puttingCount++;
      }
    }
  }
  
  // Calculate scores (1-5 scale)
  // At least 8 sessions in a month = 5, 6-7 = 4, 4-5 = 3, 2-3 = 2, 1 = 1, 0 = 0
  scores.practiceSessions = sessionCount >= 8 ? 5 : 
                            sessionCount >= 6 ? 4 :
                            sessionCount >= 4 ? 3 :
                            sessionCount >= 2 ? 2 :
                            sessionCount >= 1 ? 1 : 0;
  
  // For each category, calculate relative to number of sessions
  const calculateCategoryScore = (count: number) => {
    const ratio = count / sessionCount;
    if (ratio >= 0.75) return 5;
    if (ratio >= 0.5) return 4;
    if (ratio >= 0.25) return 3;
    if (ratio >= 0.1) return 2;
    if (ratio > 0) return 1;
    return 0;
  };
  
  scores.mentalGame = calculateCategoryScore(mentalGameCount);
  scores.strengthTraining = calculateCategoryScore(strengthCount);
  scores.mobilityExercises = calculateCategoryScore(mobilityCount);
  scores.fullSwingWork = calculateCategoryScore(fullSwingCount);
  scores.shortGameWork = calculateCategoryScore(shortGameCount);
  scores.puttingWork = calculateCategoryScore(puttingCount);
  
  return scores;
};

// Get month name from YYYY-MM format
const getMonthName = (monthStr: string): string => {
  const [year, month] = monthStr.split("-");
  const date = new Date(parseInt(year), parseInt(month) - 1, 1);
  return date.toLocaleString('default', { month: 'long', year: 'numeric' });
}; 